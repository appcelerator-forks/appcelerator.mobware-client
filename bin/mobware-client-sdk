#!/usr/bin/env node

var constants = require('../lib/constants'),
	program = require('commander'),
	mwclient = require('..'),
	path = require('path'),
	utils = require('../lib/utils');

program
	.usage('install|get|set [NAME] [VERSION] [options]')
	.description('perform API Builder SDK operations')
	.option('-f, --force', 'overwrite existing updates')
	.option('-H, --host <host>', 'The host for connecting to the API Builder server', constants.MW_HOST)
	.option('-p, --password <password>', 'password for 360 auth')
	.option('-P, --port <port>', 'The port for connecting to the API Builder server', constants.MW_PORT)
	.option('-t, --tiapp <tiapp>', 'Path to tiapp.xml', path.join(process.cwd(), 'tiapp.xml'))
	.option('-u, --username <username>', 'username for 360 auth');

program.on('--help', function() {
	console.log('  Examples:');
	console.log('');
	console.log('    # install any available API Builder SDKs');
	console.log('    $ mobware-client sdk install');
	console.log('');
	console.log('    # install specific API Builder SDK, with optional version');
	console.log('    $ mobware-client sdk install my.apibuilder.sdk');
	console.log('    $ mobware-client sdk install some.api@1.2.3');
	console.log('');
	console.log('    # get current API Builder SDK name from tiapp.xml');
	console.log('    $ mobware-client sdk get');
	console.log('      name.of.mobwareSdk');
	console.log('');
	console.log('    # set API Builder SDK');
	console.log('    $ mobware-client sdk set my.mw.sdk');
	console.log('');
	console.log('    # set API Builder SDK with version');
	console.log('    $ mobware-client sdk set my.mw.sdk 2.0');
	console.log('');
});

program.parse(process.argv);

program.type = program.args[0] || 'get';
if (program.type === 'set') {
	program.name = program.args[1];
	if (!program.name) {
		utils.die('No sdk name specified for `mwclient sdk set`');
	}
	program.version = program.args[2];
} else if (program.type === 'install' || program.type === 'update') {
	var value = program.args[1];
	if (value) {
		var parts = value.split('@');
		program.name = parts[0];
		program.version = parts[1];
	} else {
		program.version = null;
	}
} else if (program.type !== 'get') {
	utils.die('Invalid `mwclient sdk` type "' + program.type + '". Must be "get" or "set".');
}

mwclient.sdk(program, function(err, results) {
	if (err) {
		utils.die(err.stack);
	}
	if (results) {
		console.log(JSON.stringify(results));
	}
});
